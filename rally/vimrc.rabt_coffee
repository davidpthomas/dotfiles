"------------------------------------------------------------------------------
" RABT - Rally App Builder Toolkit
"------------------------------------------------------------------------------
function RallyRABT(cmd, task, args)
  try
    call ExecCmd("echo \"---[$(date)]---\" >> cake.log")
    echon "[Rally RABT] Performing " . a:task . "..."
    call ExecCmd(a:cmd . " " . a:args . " " . a:task . ">> cake.log 2>&1")
    if a:task == "build" || a:task == "deploy"
      echon "Refreshing browser..."
      call ExecCmd("echo 'BrowserReload();' | nc -q 1 localhost 4242 > /dev/null 2>&1 &")
    endif
    echon "finished."
  catch /.*/
    echon v:exception
  endtry
endfunction

function ExecCmd(cmd)
  try
    let l:out=system(a:cmd)
    if v:shell_error == 1
      throw "Error. Check cake.log"
    endif
  endtry
endfunction

" hot keys to launch rabt commands
nmap \rc :call RallyRABT("cake", "compile", "")<CR>
nmap \rb :call RallyRABT("cake", "build", "")<CR>
nmap \rl :call RallyRABT("cake", "link", "")<CR>
nmap \rd :call RallyRABT("cake", "deploy", "--server trial --username dthomas@rallydev.com --password Just4Rally")<CR>

" coffeescript file env settings
autocmd BufNewFile,BufReadPost *.coffee set foldmethod=marker shiftwidth=2 expandtab foldenable syntax=coffee
" on startup, show coffee/js split view 
autocmd BufNewFile,BufReadPost app.coffee call CoffeeSplitView()
" compile coffeescript on file save
autocmd BufWritePost *.coffee call RallyRABT("cake", "compile", "")
autocmd BufWritePost App.js  call system('rake debug')
autocmd BufWritePost App.js call system("echo 'BrowserReload();' | nc -q 1 localhost 4242 > /dev/null 2>&1 &")

" split coffee on left, js on right; auto load js when coffee is compiled
" both panes scroll
function CoffeeSplitView()
  " coffee window env; scroll with js window
  setlocal scrollbind

  " open js file
  vsplit build/app.js
  " move to js window and resize to 10 wide
  exec "2wincmd w"
  let js_win_size = winwidth(2)
  let js_shrink_size = js_win_size - 10
  echo js_win_size
  exec js_shrink_size . "wincmd <"
  " refresh on file changes
  source ~/.vimrc.watchforchanges
  execute WatchForChanges('*',{'autoread':1,'more_events':1})
  " js window env; scroll with coffee window
  setlocal scrollbind
  setlocal readonly
  setlocal nomodifiable
  setlocal syntax=javascript
  setlocal foldmethod=marker foldenable
  " move back to coffee file
  exec "1wincmd w"
endfunction


nmap <silent> \rv :silent call CoffeeSwitchView()<CR>

" Switch between coffee window (#1) and js window (#2)
function CoffeeSwitchView()
  let win1=winnr()
  let win2=1+2-winnr()    " toggle to other window (1-based)
  let win1_width = winwidth(win1)
  let win2_width = winwidth(win2)

  " identify big vs. small window
  " assume window1 is small
  let small_win = win1
  let big_win = win2
  " switch if window2 is small
  if win1_width > win2_width
    let small_win = win2
    let big_win = win1
  endif

  let big_win_size = winwidth(big_win)
  let big_win_shrink_size = big_win_size - 20
  " go to big window and shrink it
  exec big_win . "wincmd w"
  exec big_win_shrink_size . "wincmd <"
  " go back to small window which is now big!
  exec small_win . "wincmd w"
endfunction
